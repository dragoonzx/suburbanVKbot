const { VK, Keyboard } = require("vk-io");
const fetch = require("node-fetch");
const key = require("./key");
const token = require("./token");

const vk = new VK({
	token: token,
});

vk.updates.on("message", (context, next) => {
	const { messagePayload } = context;

	context.state.command =
		messagePayload && messagePayload.command ? messagePayload.command : null;

	return next();
});

// Simple wrapper for commands
const hearCommand = (name, conditions, handle) => {
	if (typeof handle !== "function") {
		handle = conditions;
		conditions = [`/${name}`];
	}

	if (!Array.isArray(conditions)) {
		conditions = [conditions];
	}

	vk.updates.hear(
		[(text, { state }) => state.command === name, ...conditions],
		handle
	);
};

// Handle start button
hearCommand("start", (context, next) => {
	context.state.command = "help";

	return Promise.all([context.send("Hello!"), next()]);
});

hearCommand("help", async context => {
	await context.send({
		message: `
			–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
			/help - –ü–æ–º–æ—â—å
			/uni - –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∞ –æ—Ç –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É –ë–∞–ª—Ç–∏–π—Å–∫–æ–≥–æ –≤–æ–∫–∑–∞–ª–∞
			/balt - –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∞ –æ—Ç –ë–∞–ª—Ç–∏–π—Å–∫–æ–≥–æ –≤ —Å—Ç–æ—Ä–æ–Ω—É –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞
		`,
		keyboard: Keyboard.keyboard([
			Keyboard.textButton({
				label: "–ü–æ–º–æ—â—å",
				payload: {
					command: "help",
				},
				color: Keyboard.PRIMARY_COLOR,
			}),
			Keyboard.textButton({
				label: "–û—Ç –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –¥–æ –ë–∞–ª—Ç–∏–π—Å–∫–æ–π",
				payload: {
					command: "uni",
				},
				color: Keyboard.POSITIVE_COLOR,
			}),
			Keyboard.textButton({
				label: "–û—Ç –ë–∞–ª—Ç–∏–π—Å–∫–æ–π –¥–æ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞",
				payload: {
					command: "balt",
				},
				color: Keyboard.POSITIVE_COLOR,
			}),
		]),
	});
});

async function getRaces(from, to) {
	let timeToApi = "";
	let dt = new Date();
	let month = dt.getMonth() + 1;
	timeToApi += dt.getFullYear() + "-" + month + "-" + dt.getDate();
	let races = await fetch(
		`https://api.rasp.yandex.net/v3.0/search/?apikey=${key}&format=json&from=${from}&to=${to}&lang=ru_RU&transoprt_types=suburban&page=1&date=${timeToApi}`
	);
	let data = await races.json();

	let str = "";
	let rightArr = await ee(await data.segments);
	let date = new Date(Date.parse(await rightArr[0]));
	let dateStr = date.getHours() + ":" + date.getMinutes();
	let timeDifference = new Date(
		Date.parse(await rightArr[0]) - new Date().getTime()
	);

	str = `–ë–ª–∏–∂–∞–π—à–∞—è —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∞ –≤ ${dateStr}
        –£ –≤–∞—Å –µ—Å—Ç—å ${timeDifference.getMinutes()} –º–∏–Ω—É—Ç ${timeDifference.getSeconds()} —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –¥–æ–π—Ç–∏ –¥–æ –Ω–µ—ë üòº`;
	return str;
}
async function ee(arr) {
	let bb = [];
	const waitTime = 12200000; //2 hours
	for (let i in arr) {
		if (
			Date.parse(arr[i].arrival) <= new Date().getTime() + waitTime &&
			Date.parse(arr[i].arrival) >= new Date().getTime()
		) {
			bb.push(arr[i].arrival);
		}
	}
	return bb;
}

hearCommand("uni", async context => {
	await Promise.all([
		context.send("–í—ã—á–∏—Å–ª—è–µ–º ü§ñ"),
		context.send("–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç - –ë–∞–ª—Ç–∏–π—Å–∫–∏–π"),
		context.send(await getRaces("s9603770", "s9602498")),
	]);
	//https://api.rasp.yandex.net/v3.0/search/?apikey={–∫–ª—é—á}&format=json&from=c146&to=c213&lang=ru_RU&page=1&date=2015-09-02
});

hearCommand("balt", async context => {
	await Promise.all([
		context.send("–ë–∞–ª—Ç–∏–π—Å–∫–∏–π - –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç ü§ñü§ñü§ñ "),
		context.send(await getRaces("s9602498", "s9603770")),
	]);
});
vk.updates.start().catch(console.error);
